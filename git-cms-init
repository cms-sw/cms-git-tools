#!/bin/sh -e
# Mimics addpkg behavior in git.
case `uname` in 
  Darwin) ECHO=echo ;;
  *) ECHO="echo -e" ;;
esac
usage () {
  echo "git cms-init [options] [release]"
  echo
  echo "Options:"
  $ECHO "-h                 \tthis help message"
  $ECHO
  $ECHO "-d, --debug        \tenable debug output"
  $ECHO "    --https        \tuse https, rather than ssh to access your personal repository"
  $ECHO "    --ssh          \tuse ssh, rather than https to access the official repository"
  $ECHO "-q, --quiet, -z    \tdo not print out progress"
  $ECHO "-y, --yes          \tassume yes to all questions"
  exit $1
}

VERBOSE=1
VERBOSE_STREAM=/dev/stderr
DEBUG_STREAM=/dev/null

RED='\033[31m'
NORMAL='\033[0m'

verbose () {
  if [ "X$VERBOSE" = X1 ]; then
    echo "$@"
  fi
}

CMSSW_TAG=
while [ "$#" != 0 ]; do
  case "$1" in
    -h | --help )
      usage 0;;
    -d | --debug )
      shift; set -x; DEBUG_STREAM=/dev/stderr ;;
    -q | --quiet | -z )
      shift; set +x; VERBOSE=0; VERBOSE_STREAM=/dev/null ;;
    -y | --yes )
      shift; ASSUME_YES=1 ;;
    --https )
      shift; USE_HTTPS_ACCESS_METHOD=true ;;
    --ssh )
      shift; USE_SSH_ACCESS_METHOD=true ;;
    -*)
      echo Unknown option $1 ; usage 1 ;;
    *)
      if [ "X$CMSSW_TAG" = X ]; then
        CMSSW_TAG=$1
      else
        echo Unexpected argument $1
        usage 1
      fi
      shift 1
    ;;
  esac
done

GITHUB_USERNAME="`git config --global --get user.github || true`"
if [ "X$GITHUB_USERNAME" = X ]; then
  echo "Cannot find your GitHub information."
  echo "Please register at"
  echo
  echo "https://github.com"
  echo
  echo "and then configure git via:"
  echo
  echo "git config --global user.github <your github username>"
  exit 1
fi
USER_FULLNAME="`git config --global --get user.name || true`"
if [ "X$USER_FULLNAME" = X ]; then
  echo "Cannot find your name in git configuration."
  echo "Please set it up via:"
  echo
  echo "git config --global user.name <your name> <your last name>"
  exit 1
fi
USER_EMAIL="`git config --global --get user.email || true`"
if [ "X$USER_EMAIL" = X ]; then
  echo "Cannot find your email in git configuration."
  echo "Please set it up via:"
  echo
  echo "git config --global user.email <your e-mail>"
  exit 1
fi


if [ "X$CMSSW_BASE" = X ]; then
  if [ "X$CMSSW_TAG" = X ]; then
    verbose CMSSW environment not setup. Do cmsenv in some workarea or specify tag to checkout.
    exit 1
  else
    verbose Warning CMSSW environment not found. Checking out packages in $PWD/src.
    CMSSW_BASE=$PWD
  fi
fi

if [ -d $CMSSW_BASE/src/.git ]; then
  CURRENT_BRANCH=`git symbolic-ref --short HEAD`
  CURRENT_TAG=`echo $CURRENT_BRANCH | sed -e's/^from-*//'`
fi

if [ "X$CMSSW_TAG" = X ]; then
  if [ "$CURRENT_BRANCH" ]; then
    verbose No release tags specified, using current branch $CURRENT_BRANCH
    CMSSW_TAG=$CURRENT_TAG
  else
    verbose No release tags specified, using default $CMSSW_VERSION.
    CMSSW_TAG=$CMSSW_VERSION
  fi
fi

if [ "$CURRENT_BRANCH" ] && [ "$CURRENT_TAG" != "$CMSSW_TAG" ]; then
  echo "Attention, you have requested a release tag $CMSSW_TAG, but your local git repository has been set up for $CURRENT_TAG."
  echo "Aborting."
  exit 1
fi

CMSSW_BASE_BRANCH=`echo $CMSSW_TAG | sed -e 's/\(CMSSW_[0-9][0-9]*_[0-9][0-9]*\).*/\1/'`

# SLHC releases
case $CMSSW_TAG in 
  *_SLHC*)
    CMSSW_BRANCH=${CMSSW_BASE_BRANCH}_X_SLHC ;;
  *)
    CMSSW_BRANCH=${CMSSW_BASE_BRANCH}_X ;;
esac

# This is not the case at FNAL. Disabling it for now.
#IN_RELEASE=`echo $PWD | grep -q -e "^$CMSSW_BASE" 2> /dev/null && echo 1 || echo 0`
#if [ "X$IN_RELEASE" = X0 ]; then
#  OLD_CMSSW_BASE=$CMSSW_BASE
#  eval `scram run -sh` >/dev/null
#  IN_RELEASE=`echo $PWD | grep -q -e "^$CMSSW_BASE" 2> /dev/null && echo 1 || echo 0`
#  if [ "X$IN_RELEASE" = X0 ]; then
#    echo git cms-addpkg must be run from inside a CMSSW area.
#    exit 1
#  else
#    echo Error: You have currently set up the environment of $OLD_CMSSW_BASE, however you are running inside $CMSSW_BASE.
#    echo Please go inside $OLD_CMSSW_BASE, or use cmsenv to switch to $CMSSW_BASE.
#    exit 1
#  fi
#fi

case `git --version` in 
  git\ version\ 1.7*)
    OFFICIAL_CMSSW_REPO=git@github.com:cms-sw/cmssw.git
    USER_CMSSW_REPO=git@github.com:$GITHUB_USERNAME/cmssw.git
    # git 1.7.x does not support a leading slash in .gitignore and .git/info/sparse-checkout
    LEADING_SLASH=
  ;;
  *)
    if [ "X$USE_SSH_ACCESS_METHOD" = X ]; then
      OFFICIAL_CMSSW_REPO=https://github.com/cms-sw/cmssw.git
    else
      OFFICIAL_CMSSW_REPO=git@github.com:cms-sw/cmssw.git
    fi
    if [ "X$USE_HTTPS_ACCESS_METHOD" = X ]; then
      USER_CMSSW_REPO=git@github.com:$GITHUB_USERNAME/cmssw.git
    else
      USER_CMSSW_REPO=https://github.com/$GITHUB_USERNAME/cmssw.git
    fi
    LEADING_SLASH=/
  ;;
esac

if [ "X$CMSSW_GIT_REFERENCE" = X ]; then
  case `hostname -f` in
    *.cern.ch)
      if [ -e /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git ]; then
        CMSSW_GIT_REFERENCE=/afs/cern.ch/cms/git-cmssw-mirror/cmssw.git
      else
        CMSSW_GIT_REFERENCE=~/.cmsgit-cache
      fi
    ;;
    *) CMSSW_GIT_REFERENCE=~/.cmsgit-cache ;;
  esac
fi

if [ ! -e $CMSSW_GIT_REFERENCE ]; then
  while [ X$QUESTION_DONE = X ]; do
    if [ X$ASSUME_YES = X ]; then
      read -n 1 -p "Your reference git repository does not seem to exist, would you like to create it? [ y / N / ? ] "
      QUESTION_DONE=1
    else
      REPLY=y
      QUESTION_DONE=1
    fi
    case $REPLY in
      y|Y|yes|YES)
        git clone --bare $OFFICIAL_CMSSW_REPO $CMSSW_GIT_REFERENCE
        touch $CMSSW_GIT_REFERENCE/create-`whoami`
      ;;
      [?])
        echo
        echo Answering yes will create a new cache directory in \$CMSSW_GIT_REFERENCE:
        echo
        echo i.e. $CMSSW_GIT_REFERENCE
        echo
        echo and put there a copy of the official CMSSW repository. git cms-addpkg will then
        echo reuse this information to keep your CMSSW workareas to a minimal size.
        echo The initial checkout could take a few minutes, but all the others should then
        echo take only a few seconds.
        echo
        echo Just say yes.
        echo
        QUESTION_DONE=
      ;;
      *)
        CMSSW_GIT_REFERENCE=
      ;;
    esac
  done
fi

# if using a personal reference repository, update it from the official one
if [ -e $CMSSW_GIT_REFERENCE/create-`whoami` ]; then
  (cd $CMSSW_GIT_REFERENCE ;  git remote update origin 2>$VERBOSE_STREAM >$VERBOSE_STREAM)
fi

mkdir -p $CMSSW_BASE/src
cd $CMSSW_BASE/src
if [ ! -d "$CMSSW_BASE/src/.git" ]; then
  # clone the official repository from $OFFICIAL_CMSSW_REPO, using $CMSSW_GIT_REFERENCE as a local reference, inside $CMSSW_BASE/src
  # name the remote repository "official-cmssw"
  # start on the branch $CMSSW_BRANCH
  # do not checkout any files
  # import all remote tags
  if [ -n "$CMSSW_GIT_REFERENCE" ]; then
    git clone --branch $CMSSW_BRANCH --no-checkout --reference $CMSSW_GIT_REFERENCE --origin official-cmssw $OFFICIAL_CMSSW_REPO $CMSSW_BASE/src >& $VERBOSE_STREAM
  else
    git clone --branch $CMSSW_BRANCH --no-checkout                                  --origin official-cmssw $OFFICIAL_CMSSW_REPO $CMSSW_BASE/src >& $VERBOSE_STREAM
  fi
  git fetch official-cmssw --tags   2> $VERBOSE_STREAM

  # create a new branch, pointing to the commit corresponding to $CMSSW_TAG, and switch to it
  git branch from-$CMSSW_TAG $CMSSW_TAG
  git symbolic-ref HEAD refs/heads/from-$CMSSW_TAG

  # check if the user's remote repository exists
  if git ls-remote $USER_CMSSW_REPO >& $DEBUG_STREAM; then
    # add the user's remote repository
    git remote add my-cmssw $USER_CMSSW_REPO
    git fetch my-cmssw                2> $VERBOSE_STREAM
    git fetch my-cmssw --tags         2> $VERBOSE_STREAM
  else
    $ECHO                                                                                                   > $VERBOSE_STREAM
    $ECHO "You don't seem to have a personal repository on GitHub, or your GitHub username "                > $VERBOSE_STREAM
    $ECHO "($RED$GITHUB_USERNAME$NORMAL) is not correct. You can work locally, but you will not be able "   > $VERBOSE_STREAM
    $ECHO "to push your changes to GitHub for inclusion in the official CMSSW distribution."                > $VERBOSE_STREAM
    $ECHO "To create a personal repository:"                                                                > $VERBOSE_STREAM
    $ECHO "  - go to https://github.com/ and log in"                                                        > $VERBOSE_STREAM
    $ECHO "  - go to https://github.com/cms-sw/cmssw and click on the Fork button"                          > $VERBOSE_STREAM
    $ECHO "  - select the option to fork the repository under your username ($RED$GITHUB_USERNAME$NORMAL)"  > $VERBOSE_STREAM
  fi

  # setup sparse checkout
  git config core.sparsecheckout true
  echo "${LEADING_SLASH}.gitignore" > $CMSSW_BASE/src/.git/info/sparse-checkout
  git checkout $CMSSW_BRANCH -- .gitignore
  git read-tree -mu HEAD
fi

verbose You are on branch `git symbolic-ref --short HEAD`
