#!/bin/sh -e
# Mimics addpkg behavior in git.
case `uname` in
  Darwin) ECHO=echo ;;
  *) ECHO="echo -e" ;;
esac
usage () {
  echo "git cms-addpkg [options] SubSystem/Package"
  echo "git cms-addpkg [options] -f FILE"
  echo
  echo "Options:"
  $ECHO "-h                 \tthis help message"
  $ECHO
  $ECHO "-d, --debug        \tenable debug output"
  $ECHO "-f, --file FILE    \tread the list of packages to be checkoed out from FILE"
  $ECHO "    --https        \tuse https, rather than ssh to access your personal repository"
  $ECHO "    --ssh          \tuse ssh, rather than https to access the official repository"
  $ECHO "-q, --quiet, -z    \tdo not print out progress"
  $ECHO "-y, --yes          \tassume yes to all questions"
  exit $1
}

VERBOSE=1
INITOPTIONS=""                      # options passed to git cms-init
VERBOSE_STREAM=/dev/stderr
DEBUG_STREAM=/dev/null

RED='\033[31m'
NORMAL='\033[0m'

verbose () {
  if [ "X$VERBOSE" = X1 ]; then
    echo "$@"
  fi
}

PKG_NAME=
INPUT_FILE=
while [ "$#" != 0 ]; do
  case "$1" in
    -h | --help )
      usage 0;;
    -d | --debug )
      INITOPTIONS="$INITOPTIONS $1"
      shift; set -x; DEBUG_STREAM=/dev/stderr ;;
    -f | --file )
      OPTION=$1; shift
      INPUT_FILE="$1"; shift
      if [ ! "$INPUT_FILE" ]; then
        $ECHO "git cms-addpkg: option $OPTION requires an argument"
        $ECHO
        usage 1
      elif [ ! -r "$INPUT_FILE" ]; then
        $ECHO "git cms-addpkg: file $INPUT_FILE does not exist or is not readable"
        $ECHO
        usage 1
      fi
      unset OPTION
      ;;
    -q | --quiet | -z )
      INITOPTIONS="$INITOPTIONS $1"
      shift; set +x; VERBOSE=0; VERBOSE_STREAM=/dev/null ;;
    -y | --yes )
      INITOPTIONS="$INITOPTIONS $1"
      shift; ASSUME_YES=1 ;;
    --https )
      INITOPTIONS="$INITOPTIONS $1"
      shift;;
    --ssh )
      INITOPTIONS="$INITOPTIONS $1"
      shift;;
    -*)
      echo Unknown option $1 ; usage 1 ;;
    *)
      if [ "$INPUT_FILE" == "" ]; then
        # check out a single package
        if [ "X$PKG_NAME" = X ]; then
          PKG_NAME=$1
          shift
        else
          echo "git cms-addpkg: you can specify only one package at the time."
          exit 1
        fi
      else
        # check out a list of packages via -f / --file FILE
        echo "git cms-addpkg: you cannot specify a package and input from file at the same time."
        exit 1
      fi
    ;;
  esac
done

if [ "$PKG_NAME" == "" ] && [ "$INPUT_FILE" == "" ] ; then
  echo "You need to specify at least one package or input file." ; exit 1
fi

if [ "$INPUT_FILE" ]; then
  # check the syntax of the input file
  INVALID=`cat "$INPUT_FILE" | sed -e's|\s*#.*||' | grep -v '^\s*$' | grep -v -E '^/*\w+(/\w+)?/*$' || true`
  if [ -n "$INVALID" ]; then
    $ECHO "Some lines of $INPUT_FILE are not in a valid format:"
    $ECHO "$RED$INVALID$NORMAL"
    exit 1
  fi
  unset INVALID
fi

# initialize the local repository
git cms-init $INITOPTIONS
cd $CMSSW_BASE/src

GITHUB_USERNAME="`git config --global --get user.github || true`"
USER_FULLNAME="`git config --global --get user.name || true`"
USER_EMAIL="`git config --global --get user.email || true`"

case `git --version` in
  git\ version\ 1.7*)
    OFFICIAL_CMSSW_REPO=git@github.com:cms-sw/cmssw.git
    USER_CMSSW_REPO=git@github.com:$GITHUB_USERNAME/cmssw.git
    # git 1.7.x does not support a leading slash in .gitignore and .git/info/sparse-checkout
    LEADING_SLASH=
  ;;
  *)
    OFFICIAL_CMSSW_REPO=`git config --get remote.official-cmssw.url || true`
    USER_CMSSW_REPO=`git config --get remote.my-cmssw.url || true`
    LEADING_SLASH=/
  ;;
esac

# check if using a reference repository
if [ "$CMSSW_GIT_REFERENCE" == "" ] && [ -f $CMSSW_BASE/src/.git/objects/info/alternates ]; then
  CMSSW_GIT_REFERENCE=`cat .git/objects/info/alternates | head -n1`
fi

# if using a personal reference repository, update it from the official one
if [ -e $CMSSW_GIT_REFERENCE/create-`whoami` ]; then
  (cd $CMSSW_GIT_REFERENCE ;  git remote update origin 2>$VERBOSE_STREAM >$VERBOSE_STREAM)
fi

# refresh the local repository
[ -n "$CMSSW_MIRROR" ] && git remote set-url official-cmssw $CMSSW_MIRROR
git fetch official-cmssw        2> $VERBOSE_STREAM
git fetch official-cmssw --tags 2> $VERBOSE_STREAM
[ -n "$CMSSW_MIRROR" ] && git remote set-url official-cmssw $OFFICIAL_CMSSW_REPO

if [ "$INPUT_FILE" ]; then
  verbose "Checking out packages"
  verbose "`cat "$INPUT_FILE"`"

  # add the requested package(s) to the sparse checkout
  cp -f $CMSSW_BASE/src/.git/info/sparse-checkout $CMSSW_BASE/src/.git/info/sparse-checkout-new
  cat "$INPUT_FILE" | sed -e's|\s*#.*||' | grep -v '^\s*$' | sed -e "s|[/]*$|/|;s|^/*|${LEADING_SLASH}|" >> $CMSSW_BASE/src/.git/info/sparse-checkout-new
  cat .git/info/sparse-checkout-new | sort -u > $CMSSW_BASE/src/.git/info/sparse-checkout
  rm -f .git/info/sparse-checkout-new
else
  verbose "Checking out package $PKG_NAME"

  # add the requested package(s) to the sparse checkout
  cp -f $CMSSW_BASE/src/.git/info/sparse-checkout $CMSSW_BASE/src/.git/info/sparse-checkout-new
  echo "$PKG_NAME" | sed -e "s|[/]*$|/|;s|^/*|${LEADING_SLASH}|" >> $CMSSW_BASE/src/.git/info/sparse-checkout-new
  cat .git/info/sparse-checkout-new | sort -u > $CMSSW_BASE/src/.git/info/sparse-checkout
  rm -f .git/info/sparse-checkout-new
fi

git read-tree -mu HEAD
CURRENT_BRANCH=`git symbolic-ref --short HEAD`

if [ "$INPUT_FILE" ]; then
  for PKG_NAME in `cat $INPUT_FILE`; do
    if [ ! -d "$CMSSW_BASE/src/$PKG_NAME" ]; then
      [ "$HEADER" ] || { $ECHO "\nThese packages do not exist in branch $CURRENT_BRANCH"; HEADER=done; }
      echo $PKG_NAME
    fi
    [ "$HEADER" ] && exit 1
  done
else
  if [ ! -d "$CMSSW_BASE/src/$PKG_NAME" ]; then
    echo "package $PKG_NAME does not exist in branch $CURRENT_BRANCH"
    exit 1
  fi
fi
